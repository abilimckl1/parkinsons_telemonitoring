parkinson_data_clean <- rbind(parkinson_data_clean, df_removing)
}
View(df[, 6:16])
View(df[6:16])
for (x in y){
print(1)
}
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
df_removing <- apply(df[x], 2, remove_outliers)
parkinson_data_clean <- rbind(parkinson_data_clean, df_removing)
}
View(parkinson_data_clean)
rm(parkinson_data_clean)
View(df[6:16])
z <- df$shimmer
View(z)
View(z)
View(df[6:16])
rm(x)
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
df_removing <- apply(df[x], 2, remove_outliers)
parkinson_data_clean <- rbind(parkinson_data_clean, df_removing)
}
parkinson_data_clean <- null
parkinson_data_clean <- null
parkinson_data_clean <- NULL
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
}
parkinson_data_clean <- apply(df[, 6:10], 2, remove_outliers)
View(parkinson_data_clean)
parkinson_data_clean %>%  distinct()
rm(parkinson_data_clean)
parkinson_data_clean <- NULL
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean <- apply(df[, 6:10], 2, remove_outliers)
}
View(parkinson_data_clean)
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean <- apply(df[, 6:10], 2, remove_outliers)
View(x)
}
parkinson_data_clean <- NULL
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean <- apply(x, 2, remove_outliers)
parkinson_data_clean <- na.omit(parkinson_data_clean)
}
library(tidyverse)
library(data.table)
df <- read.csv("parkinsons.csv")
#Dropping Subject column
df <- subset (df, select = -subject.)
df <- distinct(df)
df1 <- unique(df)
#######################################################################
#Jitter Data Outliers processing
quartiles_Jitter <- quantile(df$jitter, probs=c(.25, .75), na.rm = TRUE)
# Define function to remove outliers using Tukey method
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 6:10], 2, remove_outliers)
# Remove rows with missing values
parkinson_data_clean <- na.omit(parkinson_data_clean)
# Create boxplots of cleaned data
boxplot(parkinson_data_clean)
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers)
# Remove rows with missing values
parkinson_data_clean <- na.omit(parkinson_data_clean)
# Create boxplots of cleaned data
boxplot(parkinson_data_clean)
# Remove rows with missing values
parkinson_data_clean <- na.omit(parkinson_data_clean)
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers())
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers())
y <- df[6:16]
print(y)
print(y)
print(y)
y <- df[6:16]
print(y)
print(y)
print(x)
for (x in y){
print(x)
}
View(y)
z <- df$Jitter...
print(y)
print(z)
#Renaming all columns for better handling
setnames(df, old = c('jitter...','jitter.abs.','jitter.rap','jitter.ppq5','jitter.ddp','shimmer.db.','shimmer.apq3','shimmer.apq5','shimmer.apq11','shimmer.dda'), new = c('jitter','jitter_abs','jitter_rap','jitter_ppq5','jitter_ddp','shimmer_db','shimmer_apq3','shimmer_apq5','shimmer_apq11','shimmer_dda'))
#Renaming all columns for better handling
setnames(df, old = c('jitter...','jitter.abs.','jitter.rap','jitter.ppq5','jitter.ddp','shimmer.db.','shimmer.apq3','shimmer.apq5','shimmer.apq11','shimmer.dda'), new = c('jitter','jitter_abs','jitter_rap','jitter_ppq5','jitter_ddp','shimmer_db','shimmer_apq3','shimmer_apq5','shimmer_apq11','shimmer_dda'))
print(z)
View(df)
#Dropping Subject column
df <- subset (df, select = -subject.)
#Lowercase all columns
names(df) <- tolower(names(df))
#Renaming all columns for better handling
setnames(df, old = c('jitter...','jitter.abs.','jitter.rap','jitter.ppq5','jitter.ddp','shimmer.db.','shimmer.apq3','shimmer.apq5','shimmer.apq11','shimmer.dda'), new = c('jitter','jitter_abs','jitter_rap','jitter_ppq5','jitter_ddp','shimmer_db','shimmer_apq3','shimmer_apq5','shimmer_apq11','shimmer_dda'))
print(z)
z <- df$jitter
print(z)
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean <- rbind(parkinson_data_clean, apply(df[, 0:16], 2, remove_outliers(x)))
}
for (x in y){
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean <- rbind(parkinson_data_clean, apply(df[, 0:16], 2, remove_outliers))
}
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean <- rbind(parkinson_data_clean, apply(df[, 0:16], 2, remove_outliers))
}
rm(parkinson_data_clean)
rm(parkinson_data_clean)
View(parkinson_data_clean)
View(parkinson_data_clean)
View(parkinson_data_clean)
rm(parkinson_data_clean)
print(z)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
rm(parkinson_data_clean)
library(tidyverse)
library(data.table)
df <- read.csv("parkinsons.csv")
#Dropping Subject column
df <- subset (df, select = -subject.)
#Lowercase all columns
names(df) <- tolower(names(df))
#Renaming all columns for better handling
setnames(df, old = c('jitter...','jitter.abs.','jitter.rap','jitter.ppq5','jitter.ddp','shimmer.db.','shimmer.apq3','shimmer.apq5','shimmer.apq11','shimmer.dda'), new = c('jitter','jitter_abs','jitter_rap','jitter_ppq5','jitter_ddp','shimmer_db','shimmer_apq3','shimmer_apq5','shimmer_apq11','shimmer_dda'))
y <- df[6:16]
print(y)
library(tidyverse)
library(data.table)
df <- read.csv("parkinsons.csv")
#Dropping Subject column
df <- subset (df, select = -subject.)
#Lowercase all columns
names(df) <- tolower(names(df))
#Renaming all columns for better handling
setnames(df, old = c('jitter...','jitter.abs.','jitter.rap','jitter.ppq5','jitter.ddp','shimmer.db.','shimmer.apq3','shimmer.apq5','shimmer.apq11','shimmer.dda'), new = c('jitter','jitter_abs','jitter_rap','jitter_ppq5','jitter_ddp','shimmer_db','shimmer_apq3','shimmer_apq5','shimmer_apq11','shimmer_dda'))
y <- df[6:16]
z <- df$jitter
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean <- rbind(parkinson_data_clean, apply(df[, 0:16], 2, remove_outliers(x)))
}
parkinson_data_clean2 <- NULL
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean2 <- rbind(parkinson_data_clean2, apply(df[, 0:16], 2, remove_outliers(x)))
}
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers)
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(y))
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(y))
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(z))
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(y))
# Define function to remove outliers using Tukey method
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(y))
y <- df[6:16]
z <- df$jitter
# Define function to remove outliers using Tukey method
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(y))
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers())
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers)
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers)
# Remove rows with missing values
parkinson_data_clean <- na.omit(parkinson_data_clean)
# Create boxplots of cleaned data
boxplot(parkinson_data_clean)
parkinson_data_clean %>% distinct()
# Remove rows with missing values
parkinson_data_clean <- na.omit(parkinson_data_clean)
rm(parkinson_data_clean)
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers)
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 6:10], 2, remove_outliers)
# Create boxplots of cleaned data
boxplot(parkinson_data_clean)
0
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers)
# Create boxplots of cleaned data
boxplot(parkinson_data_clean)
parkinson_data_clean2 <- NULL
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean2 <- rbind(parkinson_data_clean2, apply(df[, 0:16], 2, remove_outliers(x)))
}
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(x))
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(x))
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(df$jitter))
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers)
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(x=z))
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(x=y))
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(y))
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 6:16], 2, remove_outliers(y))
jitter
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(df$jitter))
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(x))
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(x))
}
y <- df[6:16]
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers(x))
}
for (x in y){
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers)
}
View(parkinson_data_clean)
print(z)
library(tidyverse)
library(data.table)
library(tidyverse)
library(data.table)
df <- read.csv("parkinsons.csv")
#Dropping Subject column
df <- subset (df, select = -subject.)
#Lowercase all columns
names(df) <- tolower(names(df))
.
#Renaming all columns for better handling
setnames(df, old = c('jitter...','jitter.abs.','jitter.rap','jitter.ppq5','jitter.ddp','shimmer.db.','shimmer.apq3','shimmer.apq5','shimmer.apq11','shimmer.dda'), new = c('jitter','jitter_abs','jitter_rap','jitter_ppq5','jitter_ddp','shimmer_db','shimmer_apq3','shimmer_apq5','shimmer_apq11','shimmer_dda'))
y <- df[6:16]
z <- df$jitter
parkinson_data_clean2 <- NULL
for (x in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
parkinson_data_clean2 <- apply(df[, 0:16], 2, remove_outliers)
}
View(parkinson_data_clean2)
# Define function to remove outliers using Tukey method
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers)
x <- df$jitter
# Define function to remove outliers using Tukey method
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
x[x < (qnt[1] - H)] <- NA
x[x > (qnt[2] + H)] <- NA
x
}
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers)
# Remove rows with missing values
parkinson_data_clean <- na.omit(parkinson_data_clean)
# Apply function to remove outliers
parkinson_data_clean <- apply(df[, 0:16], 2, remove_outliers)
View(parkinson_data_clean)
parkinson_data_clean2 <- na.omit(parkinson_data_clean2)
parkinson_data_clean2 <- na.omit(parkinson_data_clean2)
parkinson_data_clean2 <- apply(df[, 0:16], 2, remove_outliers)
parkinson_data_clean2 <- na.omit(parkinson_data_clean2)
print x
print(x)
print(a)
for(a in y){
print(a)
}
for(a in y){
print(a)
}
rm(parkinson_data_clean2)
for (a in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(a, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(a, na.rm = na.rm)
a[a < (qnt[1] - H)] <- NA
a[a > (qnt[2] + H)] <- NA
a
}
parkinson_data_clean2 <- apply(df[, 0:16], 2, remove_outliers)
parkinson_data_clean2 <- na.omit(parkinson_data_clean2)
}
View(parkinson_data_clean2)
rm(parkinson_data_clean2)
for (a in y){
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(a, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(a, na.rm = na.rm)
a[a < (qnt[1] - H)] <- NA
a[a > (qnt[2] + H)] <- NA
a
}
parkinson_data_clean2 <- rbind(parkinson_data_clean,apply(df[, 0:16], 2, remove_outliers))
parkinson_data_clean2 <- na.omit(parkinson_data_clean2)
}
View(parkinson_data_clean2)
parkinson_data_clean2 <- distinct(parkinson_data_clean2)
